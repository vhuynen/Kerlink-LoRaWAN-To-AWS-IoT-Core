[
    {
        "id": "5eaeefdb028b7c47",
        "type": "base64",
        "z": "510b09e94c2d5d2b",
        "name": "Payload",
        "action": "",
        "property": "payload.PayloadData",
        "x": 360,
        "y": 260,
        "wires": [
            [
                "4943f76c566ae054"
            ]
        ]
    },
    {
        "id": "1eb2aa2b0dc39f6f",
        "type": "mqtt in",
        "z": "510b09e94c2d5d2b",
        "name": "LoRaWAN Kerlink Gateway from AWS IoT Core",
        "topic": "arn:aws:iot:<region>:<account>:thing/Home_Assistant/",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "40bd7ac7c7c24194",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 200,
        "y": 340,
        "wires": [
            [
                "5eaeefdb028b7c47"
            ]
        ]
    },
    {
        "id": "4943f76c566ae054",
        "type": "switch",
        "z": "510b09e94c2d5d2b",
        "name": "Adeunis Comfort CO2",
        "property": "payload.WirelessDeviceId",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "39f26b7d-aa14-49f2-8615-7160e4efbbc1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 260,
        "y": 180,
        "wires": [
            [
                "64a5a886c588c696"
            ]
        ]
    },
    {
        "id": "64a5a886c588c696",
        "type": "function",
        "z": "510b09e94c2d5d2b",
        "name": "Adeunis Confort CO2 Decoder",
        "func": "\"use strict\";\nObject.prototype.readInt8 = function (offset) {\n    var buffer = this;\n    var a = buffer[offset];\n    if ((a & 0x80) > 0) {\n        return a - 0x100;\n    }\n    return a;\n};\nObject.prototype.readUInt8 = function (offset) {\n    var buffer = this;\n    return buffer[offset];\n};\nObject.prototype.readInt16BE = function (offset) {\n    var buffer = this;\n    var a = (buffer[offset] << 8) | buffer[offset + 1];\n    if ((a & 0x8000) > 0) {\n        return a - 0x10000;\n    }\n    return a;\n};\nObject.prototype.readUInt16BE = function (offset) {\n    var buffer = this;\n    return (buffer[offset] << 8) | buffer[offset + 1];\n};\nObject.prototype.readInt32BE = function (offset) {\n    var buffer = this;\n    return (buffer[offset] << 24) | (buffer[offset + 1] << 16) | (buffer[offset + 2] << 8) | buffer[offset + 3];\n};\nObject.prototype.readUInt32BE = function (offset) {\n    var buffer = this;\n    return ((buffer[offset] << 24) | (buffer[offset + 1] << 16) | (buffer[offset + 2] << 8) | buffer[offset + 3]) >>> 0;\n};\nObject.prototype.readFloatBE = function (offset) {\n    var buffer = this;\n    var value = ((buffer[offset] << 24) | (buffer[offset + 1] << 16) | (buffer[offset + 2] << 8) | buffer[offset + 3]) >>> 0;\n    return new Float32Array(new Uint32Array([value]).buffer)[0];\n};\nif (typeof module !== 'undefined') {\n    module.exports = codec;\n}\nif (typeof process !== 'undefined' && process.env['NODE_ENV'] === 'test') {\n    global.codec = codec;\n}\nvar codec;\n(function (codec) {\n    var PartialDecodingReason;\n    (function (PartialDecodingReason) {\n        PartialDecodingReason[PartialDecodingReason[\"NONE\"] = 0] = \"NONE\";\n        PartialDecodingReason[PartialDecodingReason[\"MISSING_NETWORK\"] = 1] = \"MISSING_NETWORK\";\n        PartialDecodingReason[PartialDecodingReason[\"MISSING_CONFIGURATION\"] = 2] = \"MISSING_CONFIGURATION\";\n    })(PartialDecodingReason = codec.PartialDecodingReason || (codec.PartialDecodingReason = {}));\n})(codec || (codec = {}));\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nvar codec;\n(function (codec) {\n    var ContentImpl = (function () {\n        function ContentImpl(type) {\n            if (type === void 0) { type = 'Unknown'; }\n            this.type = type;\n            this.partialDecoding = codec.PartialDecodingReason.NONE;\n        }\n        ContentImpl.merge = function () {\n            var contents = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                contents[_i] = arguments[_i];\n            }\n            if (!contents || contents.length === 0) {\n                return null;\n            }\n            return Object.assign.apply(Object, __spreadArray([new ContentImpl(contents[0].type)], contents, false));\n        };\n        ContentImpl.prototype.merge = function () {\n            var contents = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                contents[_i] = arguments[_i];\n            }\n            return ContentImpl.merge.apply(ContentImpl, __spreadArray([this], contents, false));\n        };\n        return ContentImpl;\n    }());\n    codec.ContentImpl = ContentImpl;\n})(codec || (codec = {}));\nvar codec;\n(function (codec) {\n    var PlateformCommonUtils = (function () {\n        function PlateformCommonUtils() {\n        }\n        PlateformCommonUtils.getProductModeText = function (value) {\n            switch (value) {\n                case 0:\n                    return 'PARK';\n                case 1:\n                    return 'PRODUCTION';\n                case 2:\n                    return 'TEST';\n                case 3:\n                    return 'DEAD';\n                default:\n                    return '';\n            }\n        };\n        return PlateformCommonUtils;\n    }());\n    codec.PlateformCommonUtils = PlateformCommonUtils;\n})(codec || (codec = {}));\nvar codec;\n(function (codec) {\n    var GenericStatusByteParser = (function () {\n        function GenericStatusByteParser() {\n            this.deviceType = 'any';\n            this.frameCode = 0;\n        }\n        GenericStatusByteParser.prototype.parseFrame = function (payload, configuration) {\n            var statusContent = {};\n            statusContent['frameCounter'] = (payload[1] & 0xe0) >> 5;\n            statusContent['hardwareError'] = false;\n            statusContent['lowBattery'] = Boolean(payload[1] & 0x02);\n            statusContent['configurationDone'] = Boolean(payload[1] & 0x01);\n            return statusContent;\n        };\n        return GenericStatusByteParser;\n    }());\n    codec.GenericStatusByteParser = GenericStatusByteParser;\n})(codec || (codec = {}));\nvar codec;\n(function (codec) {\n    var Generic0x1fParser = (function () {\n        function Generic0x1fParser() {\n            this.deviceType = 'motion|comfort|comfort2|comfortCo2|deltap|breath|comfortSerenity';\n            this.frameCode = 0x1f;\n        }\n        Generic0x1fParser.prototype.parseFrame = function (payload, configuration, network) {\n            var appContent = { type: '0x1f digital input configuration' };\n            var input1 = {};\n            var input2 = {};\n            input1['type'] = this.getTypeText(payload[2] & 0x0f);\n            input1['debouncingPeriod'] = {\n                unit: 'ms',\n                value: this.getDebouncingPeriodText((payload[2] & 0xf0) >> 4),\n            };\n            input1['threshold'] = payload.readUInt16BE(3);\n            input2['type'] = this.getTypeText(payload[5] & 0x0f);\n            input2['debouncingPeriod'] = {\n                unit: 'ms',\n                value: this.getDebouncingPeriodText((payload[5] & 0xf0) >> 4),\n            };\n            input2['threshold'] = payload.readUInt16BE(6);\n            appContent['digitalInput1'] = input1;\n            appContent['digitalInput2'] = input2;\n            return appContent;\n        };\n        Generic0x1fParser.prototype.getDebouncingPeriodText = function (value) {\n            switch (value) {\n                case 0:\n                    return 0;\n                case 1:\n                    return 10;\n                case 2:\n                    return 20;\n                case 3:\n                    return 500;\n                case 4:\n                    return 100;\n                case 5:\n                    return 200;\n                case 6:\n                    return 500;\n                case 7:\n                    return 1000;\n                case 8:\n                    return 2000;\n                case 9:\n                    return 5000;\n                case 10:\n                    return 10000;\n                case 11:\n                    return 20000;\n                case 12:\n                    return 40000;\n                case 13:\n                    return 60000;\n                case 14:\n                    return 300000;\n                case 15:\n                    return 600000;\n                default:\n                    return 0;\n            }\n        };\n        Generic0x1fParser.prototype.getTypeText = function (value) {\n            switch (value) {\n                case 0x0:\n                    return 'deactivated';\n                case 0x1:\n                    return 'highEdge';\n                case 0x2:\n                    return 'lowEdge';\n                case 0x3:\n                    return 'bothEdges';\n                default:\n                    return '';\n            }\n        };\n        return Generic0x1fParser;\n    }());\n    codec.Generic0x1fParser = Generic0x1fParser;\n})(codec || (codec = {}));\nvar codec;\n(function (codec) {\n    var Generic0x20Parser = (function () {\n        function Generic0x20Parser() {\n            this.deviceType = 'any';\n            this.frameCode = 0x20;\n        }\n        Generic0x20Parser.prototype.parseFrame = function (payload, configuration, network, deviceType) {\n            var appContent = { type: '0x20 Configuration' };\n            switch (payload.length) {\n                case 4:\n                    appContent['loraAdr'] = Boolean(payload[2] & 0x01);\n                    appContent['loraProvisioningMode'] = payload[3] === 0 ? 'ABP' : 'OTAA';\n                    if (deviceType !== 'analog' && deviceType !== 'drycontacts' && deviceType !== 'pulse' && deviceType !== 'temp') {\n                        appContent['loraDutycyle'] = payload[2] & 0x04 ? 'activated' : 'deactivated';\n                        appContent['loraClassMode'] = payload[2] & 0x20 ? 'CLASS C' : 'CLASS A';\n                    }\n                    break;\n                case 3:\n                case 5:\n                    appContent['sigfoxRetry'] = payload[2] & 0x03;\n                    if (payload.length === 5) {\n                        appContent['sigfoxDownlinkPeriod'] = { unit: 'm', value: payload.readInt16BE(3) };\n                    }\n                    break;\n                default:\n                    appContent.partialDecoding = codec.PartialDecodingReason.MISSING_NETWORK;\n                    break;\n            }\n            return appContent;\n        };\n        return Generic0x20Parser;\n    }());\n    codec.Generic0x20Parser = Generic0x20Parser;\n})(codec || (codec = {}));\nvar codec;\n(function (codec) {\n    var Generic0x33Parser = (function () {\n        function Generic0x33Parser() {\n            this.deviceType = 'drycontacts|drycontacts2|pulse3|pulse4|' + 'temp3|temp4|comfort|comfort2|comfortCo2|modbus|motion|deltap|breath|comfortSerenity';\n            this.frameCode = 0x33;\n        }\n        Generic0x33Parser.prototype.parseFrame = function (payload, configuration, network) {\n            var appContent = { type: '0x33 Set register status' };\n            appContent['requestStatus'] = this.getRequestStatusText(payload[2]);\n            appContent['registerId'] = payload.readUInt16BE(3);\n            return appContent;\n        };\n        Generic0x33Parser.prototype.getRequestStatusText = function (value) {\n            switch (value) {\n                case 1:\n                    return 'success';\n                case 2:\n                    return 'successNoUpdate';\n                case 3:\n                    return 'errorCoherency';\n                case 4:\n                    return 'errorInvalidRegister';\n                case 5:\n                    return 'errorInvalidValue';\n                case 6:\n                    return 'errorTruncatedValue';\n                case 7:\n                    return 'errorAccesNotAllowed';\n                default:\n                    return 'errorOtherReason';\n            }\n        };\n        return Generic0x33Parser;\n    }());\n    codec.Generic0x33Parser = Generic0x33Parser;\n})(codec || (codec = {}));\nvar codec;\n(function (codec) {\n    var Generic0x37Parser = (function () {\n        function Generic0x37Parser() {\n            this.deviceType = 'temp4|comfort2|comfortCo2|breath|comfortSerenity|modbus';\n            this.frameCode = 0x37;\n        }\n        Generic0x37Parser.prototype.parseFrame = function (payload, configuration, network) {\n            var appContent = { type: '0x37 Software version' };\n            appContent['appVersion'] = payload.readUInt8(2) + '.' + payload.readUInt8(3) + '.' + payload.readUInt8(4);\n            appContent['rtuVersion'] = payload.readUInt8(5) + '.' + payload.readUInt8(6) + '.' + payload.readUInt8(7);\n            return appContent;\n        };\n        return Generic0x37Parser;\n    }());\n    codec.Generic0x37Parser = Generic0x37Parser;\n})(codec || (codec = {}));\nvar codec;\n(function (codec) {\n    var Generic0x51Parser = (function () {\n        function Generic0x51Parser() {\n            this.deviceType = 'motion|comfort|comfort2|comfortCo2|deltap|breath|comfortSerenity';\n            this.frameCode = 0x51;\n        }\n        Generic0x51Parser.prototype.parseFrame = function (payload, configuration, network) {\n            var appContent = { type: '0x51 digital input 1 alarm' };\n            if (payload[1] & 0x04) {\n                var myDate = new Date((payload.readUInt32BE(9) + 1356998400) * 1000);\n                appContent['timestamp'] = myDate.toJSON().replace('Z', '');\n            }\n            appContent['state'] = {\n                previousFrame: Boolean((payload.readUInt8(2) >> 1) & 1),\n                current: Boolean((payload.readUInt8(2) >> 0) & 1),\n            };\n            appContent['counter'] = {\n                global: payload.readUInt32BE(3),\n                instantaneous: payload.readUInt16BE(7),\n            };\n            return appContent;\n        };\n        return Generic0x51Parser;\n    }());\n    codec.Generic0x51Parser = Generic0x51Parser;\n})(codec || (codec = {}));\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function (t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar codec;\n(function (codec) {\n    var Generic0x52Parser = (function () {\n        function Generic0x52Parser() {\n            this.deviceType = 'motion|comfort|comfort2|comfortCo2|deltap|breath|comfortSerenity';\n            this.frameCode = 0x52;\n            this.parser = new codec.Generic0x51Parser();\n        }\n        Generic0x52Parser.prototype.parseFrame = function (payload, configuration, network) {\n            var appContent = __assign(__assign({}, this.parser.parseFrame(payload, configuration, network)), { type: '0x52 digital input 2 alarm' });\n            return appContent;\n        };\n        return Generic0x52Parser;\n    }());\n    codec.Generic0x52Parser = Generic0x52Parser;\n})(codec || (codec = {}));\nvar codec;\n(function (codec) {\n    var ComfortCo20x10Parser = (function () {\n        function ComfortCo20x10Parser() {\n            this.deviceType = 'comfortCo2';\n            this.frameCode = 0x10;\n        }\n        ComfortCo20x10Parser.prototype.parseFrame = function (payload, configuration, network) {\n            var appContent = { type: '0x10 Comfort CO2 configuration' };\n            (appContent['dailyFrameActivated'] = Boolean(payload.readUInt16BE(2) === 0 ? false : true)),\n                (appContent['numberOfHistorizationBeforeSending'] = payload.readUInt16BE(4)),\n                (appContent['numberOfSamplingBeforeHistorization'] = payload.readUInt16BE(6)),\n                (appContent['samplingPeriod'] = { unit: 's', value: payload.readUInt16BE(8) * 2 }),\n                (appContent['redundantSamples'] = payload.readUInt8(10)),\n                (appContent['calculatedPeriodRecording'] = {\n                    unit: 's',\n                    value: payload.readUInt16BE(8) * payload.readUInt16BE(6) * 2,\n                }),\n                (appContent['calculatedSendingPeriod'] = {\n                    unit: 's',\n                    value: payload.readUInt16BE(8) * payload.readUInt16BE(6) * payload.readUInt16BE(4) * 2,\n                });\n            if (payload.length >= 12) {\n                appContent['blackOutDuration'] = { unit: 'h', value: payload.readUInt8(11) };\n                appContent['blackOutStartTime'] = { unit: 'h', value: payload.readUInt8(12) };\n            }\n            return appContent;\n        };\n        return ComfortCo20x10Parser;\n    }());\n    codec.ComfortCo20x10Parser = ComfortCo20x10Parser;\n})(codec || (codec = {}));\nvar codec;\n(function (codec) {\n    var ComfortCo20x30Parser = (function () {\n        function ComfortCo20x30Parser() {\n            this.deviceType = 'comfortCo2';\n            this.frameCode = 0x30;\n        }\n        ComfortCo20x30Parser.prototype.parseFrame = function (payload, configuration, network) {\n            var appContent = { type: '0x30 Comfort CO2 Daily frame' };\n            if (payload[1] & 0x04) {\n                var myDate = new Date((payload.readUInt32BE(19) + 1356998400) * 1000);\n                appContent['timestamp'] = myDate.toJSON().replace('Z', '');\n            }\n            appContent['icone'] = payload.readUInt8(2);\n            appContent['qaiRedDuration'] = { unit: 'min', value: payload.readUInt8(3) * 10 };\n            appContent['temperatureMax'] = { unit: '\\u00B0' + 'C', value: payload.readInt16BE(4) / 10 };\n            appContent['co2Max'] = { unit: 'ppm', value: payload.readUInt16BE(6) };\n            appContent['humidityMax'] = { unit: '%', value: payload.readUInt8(8) };\n            appContent['temperatureMin'] = { unit: '\\u00B0' + 'C', value: payload.readInt16BE(9) / 10 };\n            switch (payload.length) {\n                case 11:\n                    break;\n                case 19:\n                case 23:\n                    appContent['co2Min'] = { unit: 'ppm', value: payload.readUInt16BE(11) };\n                    appContent['humidityMin'] = { unit: '%', value: payload.readUInt8(13) };\n                    appContent['temperatureAverage'] = { unit: '\\u00B0' + 'C', value: payload.readInt16BE(14) / 10 };\n                    appContent['co2Average'] = { unit: 'ppm', value: payload.readUInt16BE(16) };\n                    appContent['humidityAverage'] = { unit: '%', value: payload.readUInt8(18) };\n                    break;\n                default:\n                    appContent.partialDecoding = codec.PartialDecodingReason.MISSING_NETWORK;\n                    break;\n            }\n            return appContent;\n        };\n        return ComfortCo20x30Parser;\n    }());\n    codec.ComfortCo20x30Parser = ComfortCo20x30Parser;\n})(codec || (codec = {}));\nvar codec;\n(function (codec) {\n    var ComfortCo20x6aParser = (function () {\n        function ComfortCo20x6aParser() {\n            this.deviceType = 'comfortCo2';\n            this.frameCode = 0x6a;\n        }\n        ComfortCo20x6aParser.prototype.parseFrame = function (payload, configuration, network) {\n            var appContent = { type: '0x6a Comfort CO2 data' };\n            var payloadLength = payload[1] & 0x04 ? payload.length - 4 : payload.length;\n            if (payload[1] & 0x04) {\n                var myDate = new Date((payload.readUInt32BE(payloadLength) + 1356998400) * 1000);\n                appContent['timestamp'] = myDate.toJSON().replace('Z', '');\n            }\n            var rawValue;\n            var temp = [], humidity = [], CO2 = [];\n            for (var offset = 2; offset < payloadLength; offset += 5) {\n                rawValue = payload.readInt16BE(offset);\n                temp.push(rawValue / 10);\n                rawValue = payload.readUInt8(offset + 2);\n                humidity.push(rawValue);\n                rawValue = payload.readUInt16BE(offset + 3);\n                CO2.push(rawValue);\n            }\n            appContent['decodingInfo'] = 'values: [t=0, t-1, t-2, ...]';\n            appContent['temperature'] = { unit: '\\u00B0' + 'C', values: temp };\n            appContent['humidity'] = { unit: '%', values: humidity };\n            appContent['co2'] = { unit: 'ppm', values: CO2 };\n            return appContent;\n        };\n        return ComfortCo20x6aParser;\n    }());\n    codec.ComfortCo20x6aParser = ComfortCo20x6aParser;\n})(codec || (codec = {}));\nvar codec;\n(function (codec) {\n    var ComfortCo20x6bParser = (function () {\n        function ComfortCo20x6bParser() {\n            this.deviceType = 'comfortCo2';\n            this.frameCode = 0x6b;\n        }\n        ComfortCo20x6bParser.prototype.parseFrame = function (payload, configuration, network) {\n            var appContent = { type: '0x6b Comfort CO2 alarm' };\n            var payloadLength = payload[1] & 0x04 ? payload.length - 4 : payload.length;\n            if (payload[1] & 0x04) {\n                var myDate = new Date((payload.readUInt32BE(payloadLength) + 1356998400) * 1000);\n                appContent['timestamp'] = myDate.toJSON().replace('Z', '');\n            }\n            appContent['alarmTemperature'] = {\n                alarmStatus: payload[2] & 0x10 ? 'active' : 'inactive',\n                temperature: { unit: '\\u00B0' + 'C', value: payload.readInt16BE(3) / 10 },\n            };\n            appContent['alarmHumidity'] = {\n                alarmStatus: payload[2] & 0x01 ? 'active' : 'inactive',\n                humidity: { unit: '%', value: payload.readUInt8(5) },\n            };\n            appContent['alarmCo2'] = {\n                alarmStatus: payload[2] & 0x20 ? 'active' : 'inactive',\n                co2: { unit: 'ppm', value: payload.readInt16BE(6) },\n            };\n            return appContent;\n        };\n        return ComfortCo20x6bParser;\n    }());\n    codec.ComfortCo20x6bParser = ComfortCo20x6bParser;\n})(codec || (codec = {}));\nvar codec;\n(function (codec) {\n    var ComfortCo2StatusByteParser = (function () {\n        function ComfortCo2StatusByteParser() {\n            this.deviceType = 'comfortCo2';\n            this.frameCode = 0;\n        }\n        ComfortCo2StatusByteParser.prototype.parseFrame = function (payload, configuration, network) {\n            var statusContent = {};\n            var parser = new codec.GenericStatusByteParser();\n            statusContent = parser.parseFrame(payload, configuration);\n            statusContent['configurationInconsistency'] = Boolean(payload[1] & 0x08);\n            statusContent['timestamp'] = Boolean(payload[1] & 0x04);\n            return { status: statusContent };\n        };\n        return ComfortCo2StatusByteParser;\n    }());\n    codec.ComfortCo2StatusByteParser = ComfortCo2StatusByteParser;\n})(codec || (codec = {}));\nvar codec;\n(function (codec) {\n    var CommonDecoder = (function () {\n        function CommonDecoder() {\n        }\n        CommonDecoder.prototype.decode = function (payload) {\n            var _this = this;\n            var frameCode = payload[0];\n            var configuration;\n            if (frameCode === 0x10) {\n                configuration = payload;\n            }\n            var activeParsers = this.getActiveParsers(frameCode);\n            var partialContents = activeParsers.map(function (p) {\n                var partialContent;\n                try {\n                    partialContent = p.parseFrame(payload, configuration, 'unknown', _this.deviceType);\n                }\n                catch (error) {\n                    partialContent = { error: error.toString() };\n                }\n                return partialContent;\n            });\n            if (activeParsers.every(function (p) { return p.frameCode < 0; })) {\n                partialContents.push({ type: 'Unsupported' });\n            }\n            var content = Object.assign.apply(Object, __spreadArray([{}], partialContents, false));\n            var typestr = content['type'];\n            delete content['type'];\n            content = Object.assign({ type: typestr }, content);\n            return content;\n        };\n        CommonDecoder.prototype.getActiveParsers = function (frameCode) {\n            var activeParsers = [];\n            return activeParsers;\n        };\n        return CommonDecoder;\n    }());\n    codec.CommonDecoder = CommonDecoder;\n})(codec || (codec = {}));\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar codec;\n(function (codec) {\n    var Decoder = (function (_super) {\n        __extends(Decoder, _super);\n        function Decoder() {\n            var _this = _super.call(this) || this;\n            _this.deviceType = 'comfortCo2';\n            return _this;\n        }\n        Decoder.prototype.getActiveParsers = function (frameCode) {\n            var activeParsers = [];\n            var statusByteParsers = new codec.ComfortCo2StatusByteParser();\n            var dataParser;\n            switch (frameCode) {\n                case 0x10:\n                    dataParser = new codec.ComfortCo20x10Parser();\n                    break;\n                case 0x30:\n                    dataParser = new codec.ComfortCo20x30Parser();\n                    break;\n                case 0x6a:\n                    dataParser = new codec.ComfortCo20x6aParser();\n                    break;\n                case 0x6b:\n                    dataParser = new codec.ComfortCo20x6bParser();\n                    break;\n                case 0x1f:\n                    dataParser = new codec.Generic0x1fParser();\n                    break;\n                case 0x20:\n                    dataParser = new codec.Generic0x20Parser();\n                    break;\n                case 0x33:\n                    dataParser = new codec.Generic0x33Parser();\n                    break;\n                case 0x37:\n                    dataParser = new codec.Generic0x37Parser();\n                    break;\n                case 0x51:\n                    dataParser = new codec.Generic0x51Parser();\n                    break;\n                case 0x52:\n                    dataParser = new codec.Generic0x52Parser();\n                    break;\n                default:\n                    return activeParsers;\n            }\n            activeParsers = activeParsers.concat(statusByteParsers);\n            activeParsers = activeParsers.concat(dataParser);\n            return activeParsers;\n        };\n        return Decoder;\n    }(codec.CommonDecoder));\n    codec.Decoder = Decoder;\n})(codec || (codec = {}));\nvar decoder = new codec.Decoder();\nmsg.payload.PayloadData = decoder.decode(msg.payload.PayloadData);\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 180,
        "wires": [
            [
                "81424845395cfe3f",
                "6d7b4f7c80c6432e"
            ]
        ]
    },
    {
        "id": "81424845395cfe3f",
        "type": "switch",
        "z": "510b09e94c2d5d2b",
        "name": "0x6a Comfort CO2 data",
        "property": "payload.PayloadData.type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0x6a Comfort CO2 data",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 690,
        "y": 100,
        "wires": [
            [
                "3271a5f1fac7a047"
            ]
        ]
    },
    {
        "id": "6d7b4f7c80c6432e",
        "type": "switch",
        "z": "510b09e94c2d5d2b",
        "name": "0x51 digital input 1 alarm",
        "property": "payload.PayloadData.type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0x51 digital input 1 alarm",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 670,
        "y": 260,
        "wires": [
            [
                "274717e804506a33"
            ]
        ]
    },
    {
        "id": "3271a5f1fac7a047",
        "type": "function",
        "z": "510b09e94c2d5d2b",
        "name": "TTN To HA",
        "func": "msg.payload = {\n    \"temperature\": {\n        \"value\": msg.payload.PayloadData.temperature.values[0]\n    },\n    \"humidity\": {\n        \"value\": msg.payload.PayloadData.humidity.values[0]\n    },\n    \"co2\": {\n        \"value\": msg.payload.PayloadData.co2.values[0]\n    },\n    \"lowBattery\": {\n        \"value\": msg.payload.PayloadData.status.lowBattery\n    },\n    \"hardwareError\": {\n        \"value\": msg.payload.PayloadData.status.hardwareError\n    }\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 180,
        "wires": [
            [
                "8cfbea7e7a72b320"
            ]
        ]
    },
    {
        "id": "274717e804506a33",
        "type": "function",
        "z": "510b09e94c2d5d2b",
        "name": "TTN To HA",
        "func": "msg.payload = {\n    \"button\": {\n        \"value\": true\n    }\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 260,
        "wires": [
            [
                "269637f50c30964d"
            ]
        ]
    },
    {
        "id": "8cfbea7e7a72b320",
        "type": "mqtt out",
        "z": "510b09e94c2d5d2b",
        "name": "",
        "topic": "/adeunis/confort/co2",
        "qos": "1",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "e80e01905026b46d",
        "x": 1100,
        "y": 180,
        "wires": []
    },
    {
        "id": "269637f50c30964d",
        "type": "mqtt out",
        "z": "510b09e94c2d5d2b",
        "name": "",
        "topic": "/adeunis/confort/co2/button",
        "qos": "1",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "e80e01905026b46d",
        "x": 1140,
        "y": 260,
        "wires": []
    },
    {
        "id": "40bd7ac7c7c24194",
        "type": "mqtt-broker",
        "name": "MQTT Borker",
        "broker": "10.0.0.150",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "e80e01905026b46d",
        "type": "mqtt-broker",
        "name": "Zigbee2MQTT",
        "broker": "10.0.0.150",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    }
]